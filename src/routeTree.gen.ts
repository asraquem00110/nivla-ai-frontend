/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as PublicLayoutImport } from './routes/_public/layout'
import { Route as IndexImport } from './routes/index'
import { Route as PublicSamplepublicImport } from './routes/_public/sample_public'
import { Route as PublicUsersIndexImport } from './routes/_public/users/index'
import { Route as PublicMapIndexImport } from './routes/_public/map/index'
import { Route as PublicUsersRegisterImport } from './routes/_public/users/register'
import { Route as PublicUsersLoginImport } from './routes/_public/users/login'
import { Route as PublicUsersFetchUserIdImport } from './routes/_public/users/fetch.$userId'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const PublicLayoutRoute = PublicLayoutImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicSamplepublicRoute = PublicSamplepublicImport.update({
  id: '/sample_public',
  path: '/sample_public',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const PublicUsersIndexRoute = PublicUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const PublicMapIndexRoute = PublicMapIndexImport.update({
  id: '/map/',
  path: '/map/',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const PublicUsersRegisterRoute = PublicUsersRegisterImport.update({
  id: '/users/register',
  path: '/users/register',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const PublicUsersLoginRoute = PublicUsersLoginImport.update({
  id: '/users/login',
  path: '/users/login',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const PublicUsersFetchUserIdRoute = PublicUsersFetchUserIdImport.update({
  id: '/users/fetch/$userId',
  path: '/users/fetch/$userId',
  getParentRoute: () => PublicLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicLayoutImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/_public/sample_public': {
      id: '/_public/sample_public'
      path: '/sample_public'
      fullPath: '/sample_public'
      preLoaderRoute: typeof PublicSamplepublicImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_public/users/login': {
      id: '/_public/users/login'
      path: '/users/login'
      fullPath: '/users/login'
      preLoaderRoute: typeof PublicUsersLoginImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_public/users/register': {
      id: '/_public/users/register'
      path: '/users/register'
      fullPath: '/users/register'
      preLoaderRoute: typeof PublicUsersRegisterImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_public/map/': {
      id: '/_public/map/'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof PublicMapIndexImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_public/users/': {
      id: '/_public/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof PublicUsersIndexImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_public/users/fetch/$userId': {
      id: '/_public/users/fetch/$userId'
      path: '/users/fetch/$userId'
      fullPath: '/users/fetch/$userId'
      preLoaderRoute: typeof PublicUsersFetchUserIdImport
      parentRoute: typeof PublicLayoutImport
    }
  }
}

// Create and export the route tree

interface PublicLayoutRouteChildren {
  PublicSamplepublicRoute: typeof PublicSamplepublicRoute
  PublicUsersLoginRoute: typeof PublicUsersLoginRoute
  PublicUsersRegisterRoute: typeof PublicUsersRegisterRoute
  PublicMapIndexRoute: typeof PublicMapIndexRoute
  PublicUsersIndexRoute: typeof PublicUsersIndexRoute
  PublicUsersFetchUserIdRoute: typeof PublicUsersFetchUserIdRoute
}

const PublicLayoutRouteChildren: PublicLayoutRouteChildren = {
  PublicSamplepublicRoute: PublicSamplepublicRoute,
  PublicUsersLoginRoute: PublicUsersLoginRoute,
  PublicUsersRegisterRoute: PublicUsersRegisterRoute,
  PublicMapIndexRoute: PublicMapIndexRoute,
  PublicUsersIndexRoute: PublicUsersIndexRoute,
  PublicUsersFetchUserIdRoute: PublicUsersFetchUserIdRoute,
}

const PublicLayoutRouteWithChildren = PublicLayoutRoute._addFileChildren(
  PublicLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PublicLayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/sample_public': typeof PublicSamplepublicRoute
  '/users/login': typeof PublicUsersLoginRoute
  '/users/register': typeof PublicUsersRegisterRoute
  '/map': typeof PublicMapIndexRoute
  '/users': typeof PublicUsersIndexRoute
  '/users/fetch/$userId': typeof PublicUsersFetchUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PublicLayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/sample_public': typeof PublicSamplepublicRoute
  '/users/login': typeof PublicUsersLoginRoute
  '/users/register': typeof PublicUsersRegisterRoute
  '/map': typeof PublicMapIndexRoute
  '/users': typeof PublicUsersIndexRoute
  '/users/fetch/$userId': typeof PublicUsersFetchUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_public': typeof PublicLayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/_public/sample_public': typeof PublicSamplepublicRoute
  '/_public/users/login': typeof PublicUsersLoginRoute
  '/_public/users/register': typeof PublicUsersRegisterRoute
  '/_public/map/': typeof PublicMapIndexRoute
  '/_public/users/': typeof PublicUsersIndexRoute
  '/_public/users/fetch/$userId': typeof PublicUsersFetchUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/sample_public'
    | '/users/login'
    | '/users/register'
    | '/map'
    | '/users'
    | '/users/fetch/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/sample_public'
    | '/users/login'
    | '/users/register'
    | '/map'
    | '/users'
    | '/users/fetch/$userId'
  id:
    | '__root__'
    | '/'
    | '/_public'
    | '/about'
    | '/_public/sample_public'
    | '/_public/users/login'
    | '/_public/users/register'
    | '/_public/map/'
    | '/_public/users/'
    | '/_public/users/fetch/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PublicLayoutRoute: typeof PublicLayoutRouteWithChildren
  AboutRoute: typeof AboutRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PublicLayoutRoute: PublicLayoutRouteWithChildren,
  AboutRoute: AboutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_public",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_public": {
      "filePath": "_public/layout.tsx",
      "children": [
        "/_public/sample_public",
        "/_public/users/login",
        "/_public/users/register",
        "/_public/map/",
        "/_public/users/",
        "/_public/users/fetch/$userId"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/_public/sample_public": {
      "filePath": "_public/sample_public.tsx",
      "parent": "/_public"
    },
    "/_public/users/login": {
      "filePath": "_public/users/login.tsx",
      "parent": "/_public"
    },
    "/_public/users/register": {
      "filePath": "_public/users/register.tsx",
      "parent": "/_public"
    },
    "/_public/map/": {
      "filePath": "_public/map/index.tsx",
      "parent": "/_public"
    },
    "/_public/users/": {
      "filePath": "_public/users/index.tsx",
      "parent": "/_public"
    },
    "/_public/users/fetch/$userId": {
      "filePath": "_public/users/fetch.$userId.tsx",
      "parent": "/_public"
    }
  }
}
ROUTE_MANIFEST_END */
